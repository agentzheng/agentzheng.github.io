(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{324:function(t,r,a){"use strict";a.r(r);var n=a(1),i=Object(n.a)({},function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("今天是2017年的最后一天，新年快乐啊各位，新的一年也要加油呀！\n　　今天复习了一下数据结构关于排序的这块，自己用C++实现了大部分算法,做个记录。唯一辣眼睛的就是树形选择排序算法，我选择死亡。")]),t._v(" "),a("h2",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"按照排序方式分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按照排序方式分","aria-hidden":"true"}},[t._v("#")]),t._v(" 按照排序方式分")]),t._v(" "),a("ul",[a("li",[t._v("插入排序\n"),a("ul",[a("li",[t._v("直接插入排序")]),t._v(" "),a("li",[t._v("希尔排序")])])]),t._v(" "),a("li",[t._v("选择排序\n"),a("ul",[a("li",[t._v("简单选择排序")]),t._v(" "),a("li",[t._v("堆排序")]),t._v(" "),a("li",[t._v("树形选择排序")])])]),t._v(" "),a("li",[t._v("交换排序\n"),a("ul",[a("li",[t._v("冒泡排序")]),t._v(" "),a("li",[t._v("快速排序")])])]),t._v(" "),a("li",[t._v("归并排序")]),t._v(" "),a("li",[t._v("基数排序")]),t._v(" "),a("li",[t._v("计数排序")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"按照算法复杂度分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按照算法复杂度分","aria-hidden":"true"}},[t._v("#")]),t._v(" 按照算法复杂度分")]),t._v(" "),a("ul",[a("li",[t._v("O(n)\n"),a("ul",[a("li",[t._v("计数排序     O(n+h)")]),t._v(" "),a("li",[t._v("基数排序     O(n)")])])]),t._v(" "),a("li",[t._v("O(n*log(n))\n"),a("ul",[a("li",[t._v("归并排序")]),t._v(" "),a("li",[t._v("快速排序 （在最坏情况下会退化为冒泡排序）")]),t._v(" "),a("li",[t._v("堆排序")]),t._v(" "),a("li",[t._v("树形选择排序")]),t._v(" "),a("li",[t._v("希尔排序（下界是O(n*log2n),与增量因子序列的选取有关）")])])]),t._v(" "),a("li",[t._v("O(n^2)\n"),a("ul",[a("li",[t._v("冒泡排序")]),t._v(" "),a("li",[t._v("插入排序")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"按稳定性分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按稳定性分","aria-hidden":"true"}},[t._v("#")]),t._v(" 按稳定性分")]),t._v(" "),a("p",[t._v("这边大家看着高兴就好，有人说一种排序方法，如果它不稳定，那么无论你写出什么样的程序来实现它，总会有使之不稳定的实例存在。但是对于稳定的排序，可能有的程序实现算法会不稳定，但是总能写出另一种算法使其稳定。我不保证下面这些是对的，但是大部分应该是对的。")]),t._v(" "),a("ul",[a("li",[t._v("稳定排序\n"),a("ul",[a("li",[t._v("基数排序(LSD方法)")]),t._v(" "),a("li",[t._v("直接插入排序")]),t._v(" "),a("li",[t._v("冒泡排序")]),t._v(" "),a("li",[t._v("归并排序")]),t._v(" "),a("li",[t._v("树形选择排序")]),t._v(" "),a("li",[t._v("简单选择排序")])])]),t._v(" "),a("li",[t._v("不稳定排序\n"),a("ul",[a("li",[t._v("快速排序")]),t._v(" "),a("li",[t._v("堆排序")]),t._v(" "),a("li",[t._v("希尔排序")]),t._v(" "),a("li",[t._v("选择排序")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"简单解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单解释","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单解释")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"直接插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接插入排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 直接插入排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("实际上是希尔排序增量因子初值为1时的情况。将前面的一部分假设为有序，然后取出有序部分之后的第一个无序元素，那么就会出现一个空位，然后我们将空位前移到有序部分它应该在的地方，然后再将元素插入。（之所以原来要把元素取出来，是为了减少交换元素的操作，取出来可以直接赋值，无需交换）")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"希尔排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 希尔排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行一次直接插入排序。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"简单选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单选择排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单选择排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("初始无序序列为整个数组")])]),t._v(" "),a("li",[a("p",[t._v("从无序序列中选出一个最小的，将它和无序序列最前端的元素做交换")])]),t._v(" "),a("li",[a("p",[t._v("将原无序序列的最前端的那个元素并入有序序列")])]),t._v(" "),a("li",[a("p",[t._v("重复2,3步骤，直到整个序列均为有序序列")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"堆排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-4","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("ol",[a("li",[t._v("建立一个堆（实际上是从下往上，逐个调整子堆）")]),t._v(" "),a("li",[t._v("取出堆顶元素")]),t._v(" "),a("li",[t._v("调整堆")]),t._v(" "),a("li",[t._v("重复2,3步骤直到堆为空")])]),t._v(" "),a("h4",{attrs:{id:"我的想法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的想法","aria-hidden":"true"}},[t._v("#")]),t._v(" 我的想法")]),t._v(" "),a("p",[t._v("优雅的算法")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"树形选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树形选择排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 树形选择排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-5","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("两两比较，将结果存在二叉树当中")])]),t._v(" "),a("li",[a("p",[t._v("然后取出最大的，将其置为无穷大，再从原最大元素所在的子树开始，向上更新二叉树，重新获得最大值。")])]),t._v(" "),a("li",[a("p",[t._v("重复2步骤，直到所有元素均为无穷大")])])]),t._v(" "),a("h4",{attrs:{id:"我的想法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的想法-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 我的想法")]),t._v(" "),a("p",[t._v("请你当场去世，谢谢")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-6","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("ol",[a("li",[t._v("递归地调用归并排序将左右两边分别排好序")]),t._v(" "),a("li",[t._v("合并两个数组")])]),t._v(" "),a("h4",{attrs:{id:"我的想法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的想法-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 我的想法")]),t._v(" "),a("p",[t._v("这玩意儿好蛋疼啊，辅助数组很艰难，归并的时候很体验极差，主要是还要额外申请辅助数组，占用额外空间不说，还容易内存泄露。但是我做错了一个东西就是，辅助数组应该是共用的，现在改过来了")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-7","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("初始认为整体序列无序")])]),t._v(" "),a("li",[a("p",[t._v("遍历无序序列，将最大值交换到无序序列最后")])]),t._v(" "),a("li",[a("p",[t._v("无序序列缩小")])]),t._v(" "),a("li",[a("p",[t._v("重复2,3直到无序序列为空")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-8","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("每次调整将无序序列的第一个元素放到序列中他应该在的位置，然后递归地对前面一半序列，和后面一个序列进行快速排序。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"基数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基数排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 基数排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-9","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("基数排序属于“分配式排序”，又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，")]),t._v(" "),a("h4",{attrs:{id:"我的想法-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的想法-4","aria-hidden":"true"}},[t._v("#")]),t._v(" 我的想法")]),t._v(" "),a("p",[t._v("脱离了低级趣味的排序方法，虽然是O（n）的复杂度，但是系数比较大，至于空间的话其实可以用链表来搞定，会提高空间利用率，像我下面这样用二维数组当然是很浪费空间的啦。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"计数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计数排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 计数排序")]),t._v(" "),a("h4",{attrs:{id:"算法思想-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-10","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("数组A，大小为n，用来存放待排序数组")]),t._v(" "),a("p",[t._v("辅助数组C ，大小为K+1（K为数列中最大数的大小），C[i]用来记录比i小的元素的个数。")]),t._v(" "),a("p",[t._v("辅助数组B，大小为n，用来暂时存放排好序的数组。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("遍历数组A，填充辅助数组C。")])]),t._v(" "),a("li",[a("p",[t._v("再次遍历数组A，对于A中每个元素A[i],将C[A[i]]作为它在数组B的索引然后暂存到B数组中。")])]),t._v(" "),a("li",[a("p",[t._v("对于重复的数 i ，每排好一个 i 则对其C[i] 减一，以此对完成其余相同的数字进行排位。")])]),t._v(" "),a("li",[a("p",[t._v("将B数组拷贝到A数组。")])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"c-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-实现","aria-hidden":"true"}},[t._v("#")]),t._v(" C++实现")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"归并排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//归并排序\n//都是实心的，就是front和rear都是有元素的\nvoid merge_sort(int* arr, int * help, int front, int rear)\n{\n\tif (front == rear)\n\t\treturn;\n\tif ((front + 1 == rear) && arr[rear] < arr[front])\n\t{\n\t\tint temp = arr[front];\n\t\tarr[front] = arr[rear];\n\t\tarr[rear] = temp;\n\t\treturn;\n\t}\n\tmerge_sort(arr, help, front, (front + rear) / 2);\n\tmerge_sort(arr, help, (front + rear) / 2 + 1, rear);\n\n\tint n = rear - front + 1;\n\tint first_ptr = front;\n\tint sec_ptr = (front + rear) / 2 + 1;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (first_ptr <= (front + rear) / 2 && (arr[first_ptr] < arr[sec_ptr] || sec_ptr>rear))\n\t\t{\n\t\t\thelp[i] = arr[first_ptr];\n\t\t\tfirst_ptr++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thelp[i] = arr[sec_ptr];\n\t\t\tsec_ptr++;\n\t\t}\n\t}\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tarr[i + front] = help[i];\n\t}\n\n}\n//真正在用的时候应该用这个，上面那个函数是递归的，不好调用\nvoid merge_sort_util(int *arr, int n)\n{\n\tint * help = new int[n];\n\tmerge_sort(arr, help, 0, n - 1);\n\tdelete[] help;\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"快速排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//快速排序，front和rear这两个都是实心的\nvoid QuickSort(int *arr, int front, int rear)\n{\n\tint standerd = arr[front];\n\tint i = front;\n\tint j = rear;\n\twhile (true)\n\t{\n\t\twhile (arr[j] >=standerd&&i!=j)\n\t\t\tj--;\n\t\twhile (arr[i] <= standerd&&i!=j)\n\t\t\ti++;\n\t\tif (i == j)\n\t\t\tbreak;\n\t\tint temp = arr[i];\n\t\tarr[i] = arr[j];\n\t\tarr[j] = temp;\n\t}\n\tarr[front] = arr[i];\n\tarr[i] = standerd;\n//下面这两个都是递归的，但是就是他们自己来终止\n\tif(i-1>front)\n\t\tQuickSort(arr, front, i - 1);\n\tif(i+1<rear)\n\t\tQuickSort(arr, i+1,rear);\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"基数排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基数排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 基数排序")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//基数排序 lenth为元素的最多位数，这里的DoubleArr是我的自定义二维数组类，\n//可以查看我的上一篇博文，我们就把它当做普通的二维数组来用就可以了\nvoid BaseSort(int * arr, int n,int length)\n{\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tDoubleArr<int> help(10, n, INT_MAX);\n\t\tDoubleArr<int> count(1, 10, 0);\n\t\tint div = pow(10, i);\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tint temp = (arr[j] / div) % 10;\n\t\t\thelp[temp][count[0][temp]] = arr[j];\n\t\t\tcount[0][temp]++;\n\t\t}\n\t\tint index = 0;\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tfor (int k = 0; k < count[0][j]; k++)\n\t\t\t{\n\t\t\t\tarr[index] = help[j][k];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"计数排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计数排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 计数排序")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//最简单版的计数排序,数组元素的取值范围为0-k\nvoid CountSort(int* arr,int n,int k)\n{\n\tconst int length = k + 1;\n\tint* count = new int[length];\n\tint *help = new int[n];\n\tmemset(count, 0, sizeof(int)*(length));//初始化数组为0\n\tint i = 0;\n\tfor (; i < n; i++)\n\t\tcount[arr[i]]++;\n\tfor (i=1; i < length; i++)\n\t\tcount[i] += count[i - 1];\n\tfor (i = n-1; i >=0; i--)\n\t{\n\t\thelp[count[arr[i]] - 1] = arr[i];\n\t\tcount[arr[i]]--;\n\t}\n\tfor (i = 0; i < n; i++)\n\t\tarr[i] = help[i];\n\tdelete[] help;\n\tdelete[] count;\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"冒泡排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//冒泡排序\nvoid BubbleSort(int * arr, int n)\n{\n\tfor (int i=n-1;i>0;i--)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"插入排序和希尔排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序和希尔排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 插入排序和希尔排序")]),t._v(" "),a("p",[t._v("​\t由于希尔排序和直接插入排序实际上只有初始增量因子之间的差别，所以我们在实现的时候只要实现一般形式，当初始增量因子为n/2时，排序为希尔排序，当初始增量因子为1时排序为直接插入排序。")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//希尔插入排序的一般形式,当factcor为1时为直接插入排序\nvoid HillInsertSort(int * arr, int n, int factor)\n{\n\tif (factor < 1)\n\t\treturn;\n\tfor (int i = 0; i < factor; i++)\n\t{\n\t\tint sorted = i;\n\t\tfor (sorted = i; sorted < n - factor; sorted += factor)\n\t\t{\n\t\t\tint j = sorted + factor;\n\t\t\tint sentinel = arr[j];\n\t\t\twhile (sentinel < arr[j - factor] && j >= factor)\n\t\t\t{\n\t\t\t\tarr[j] = arr[j - factor];\n\t\t\t\tj -= factor;\n\t\t\t}\n\t\t\tarr[j] = sentinel;\n\t\t}\n\t}\n\tHillInsertSort(arr, n, factor - 1);\n}\n\n//直接插入排序\nvoid InsertSort(int * arr,int n)\n{\n\tHillInsertSort(arr, n, 1);\n}\n\n\n//希尔排序\nvoid HillSort(int *arr, int n)\n{\n\tint inc_factor = n / 2;//初始化增量因子\n\tHillInsertSort(arr, n, inc_factor);\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"堆排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//调整堆，这里做的事情实际上只是把当前索引为parent的节点向下调整，放到它应该在的地方\nvoid HeapAdjust(int* arr, int  parent, int length)//默写出来还行\n{\n\tint temp = arr[parent];//暂存parent节点的值，省的一直交换\n\twhile (parent * 2+1 < length)\n\t{\n\t\tint j = parent * 2+1;\n\t\tif (j + 1 < length&&arr[j + 1] > arr[j])//如果右孩子存在，而且还比左孩子大,那么就把j++\n\t\t\tj++;\n\t\t//上面这步之后，arr[j]代表的是parent的两个孩子中最大的那个\n\t\tif (arr[j] > temp)\n\t\t{\n\t\t\tarr[parent] = arr[j];\n\t\t\tparent = j;\n\t\t}\n\t\telse //这个else的意思就是如果两个孩子最大的都没有它自己大，那就没什么必要换了，这就是他的位置\n\t\t\tbreak;\n\t}\n\tarr[parent] = temp;\n}\n\nvoid HeapSort(int * arr, int length)//堆排序\n{\n\t//初始化大顶堆，才能从小到大\n\tfor (int i = length / 2; i >= 0; i--)\n\t{\n\t\tHeapAdjust(arr, i, length);\n\t}\n\n\t//取出堆顶元素，放到堆长度后面一格，然后将所谓的i--，这里i指的是堆的大小\n\tfor (int i = length - 1; i > 0; i--)\n\t{\n\t\tint temp = arr[i];\n\t\tarr[i] = arr[0];\n\t\tarr[0] = temp;\n\t\tHeapAdjust(arr, 0, i);\n\t}\n}\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"树形选择排序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树形选择排序-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 树形选择排序")]),t._v(" "),a("p",[t._v("告辞")])])},[],!1,null,null,null);r.default=i.exports}}]);